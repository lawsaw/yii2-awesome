mixin a(options)
    -
        var defaults = {
            'href': '#',
            'title': '',
            'styles': {
                'color': linkColor,
                'font-size': fontSizeM,
                'font-family': fontFamily,
                'line-height': lineHeight,
                'text-transform': 'none',
            }
        };
        options = options ? options : {}
        var options = setOptions(defaults, options);
    span(style= options.styles)
        a(
            href= options.href
            title= options.title
            target= options.target ? options.target : "_blank"
            style= options.styles
        )
            span(style= options.styles)
                - if(options.italic) {
                i
                    if block
                        block
                - } else {
                if block
                    block
                - }


mixin table(options)
    -
        var styles = {
            'width'     : '100%',
            'height'    : 'auto',
            'bgcolor'   : 'transparent',
            'background'   : '',
            'align'     : 'center',
        };
        options = options ? options : {},
        newOptions = setOptions(styles, options),
        width = (newOptions.width.indexOf('%') == -1) ? (newOptions.width == 'auto') ? newOptions.width : parseInt(newOptions.width) : newOptions.width;
        height = (newOptions.height.indexOf('%') == -1) ? (newOptions.height == 'auto') ? newOptions.height : parseInt(newOptions.height) : newOptions.height;
        align = newOptions.align;
        bgcolor = newOptions.bgcolor;
        background = newOptions.background;
        delete newOptions.width;
        delete newOptions.height;
        delete newOptions.align;
        delete newOptions.bgcolor;
        delete newOptions.background;
    table(
    cellspacing='0'
    cellpadding='0'
    width= width
    height= height
    align= align
    bgcolor= bgcolor
    background= background
    style=newOptions
    )
        tr
            if block
                block

mixin td(options)
    -
        var styles = {
            'width': 'auto',
            'height': 'auto',
            'bgcolor': 'transparent',
            'bordercolor': 'transparent',
            'align': 'left', //left / center / right / justify / char
            'valign': 'top', //top / middle / bottom / baseline
            'tag': 'td', //td / th
        },
        options = options ? options : {},
        newOptions = setOptions(styles, options),
        width = (newOptions.width.indexOf('%') == -1) ? (newOptions.width == 'auto') ? newOptions.width : parseInt(newOptions.width) : newOptions.width,
        height = (newOptions.height.indexOf('%') == -1) ? (newOptions.height == 'auto') ? newOptions.height : parseInt(newOptions.height) : newOptions.height,
        tag = newOptions.tag,
        align = newOptions.align,
        valign = newOptions.valign,
        bgcolor = newOptions.bgcolor;
        bordercolor = newOptions.bordercolor;
        delete newOptions.width;
        delete newOptions.height;
        delete newOptions.align;
        delete newOptions.valign;
        delete newOptions.bgcolor;
        delete newOptions.bordercolor;
        delete newOptions.tag;
    - if(tag == 'td') {
    td(
        width= width
        height= height
        bgcolor= bgcolor
        bordercolor= bordercolor
        align= align
        valign= valign
        style= newOptions
    )
        if block
            block
    - } else {
    th(
        width= width
        height= height
        bgcolor= bgcolor
        bordercolor= bordercolor
        align= align
        valign= valign
        style= newOptions
    )
        if block
            block
    - }


mixin container(options)
    -
        var defaults = {
            'width': 'auto',
            'align': 'left',
        };
        options = options ? options : {}
        var options = setOptions(defaults, options);
    +table({
        'width': options.width,
        'align': options.align
    })
        +td({

        })
            if block
                block


mixin article(options)
    -
        var defaults = {
            'src': 'images/fuck.png',
            'alt': 'fucking alt',
            'color': colorFont,
            'font-size': fontSizeM,
            'font-family': fontFamily,
            'line-height': lineHeight,
            'text-transform': 'none',
            'width': '100%',
            'height': 'auto',
            'cellspacing': '0',
            'cellpadding': '0',
            'bgcolor': 'transparent',
            'bordercolor': 'transparent',
            'border': '0',
            'link': 'http://google.com',
        };
        options = options ? options : {}
        var options = setOptions(defaults, options);


    a(href= options.link target="_blank" style={
        'display': 'block',
        'text-decoration': 'none',
    })
        +img({
            'src': options.src,
            'alt': options.alt,
            'width': options.width,
            'height': options.height,
            'cellspacing': options.cellspacing,
            'cellpadding': options.cellpadding,
            'bgcolor': options.bgcolor,
            'bordercolor': options.bordercolor,
            'border': options.border,
        })
    +separator({
        'height': '15px',
    })
    +table({

    })
        +td
            +text({
                'font-size': options['font-size'],
                'font-family': options['font-family'],
                'text-align': options['text-align'],
                'text-transform': options['text-transform'],
                'line-height': options['line-height'],
            })
                if block
                    block
    +separator({
        'height': '15px',
    })
    a(href= options.link target="_blank" style={
        'color': linkColor,
        'font-size': fontSizeM,
        'font-family': fontFamily,
        'text-decoration': 'underline',
    })= options.linkLabel




mixin img(options)
    -
        var defaults = {
            'display': 'block',
            'src': 'images/fuck.png',
            'alt': 'fucking alt',
            'width': '100%',
            'height': 'auto',
            'cellspacing': '0',
            'cellpadding': '0',
            'bgcolor': 'transparent',
            'bordercolor': 'transparent',
            'border': '0',
        };
        options = options ? options : {}
        var options = setOptions(defaults, options),
            width = 0,
            height = 0,
            width2 = 0,
            height2 = 0;

        if(options.width.indexOf('%') == -1) {
            if(options.width == 'auto') {
                width = options.width;
                width2 = options.width;
            } else {
                width = parseInt(options.width);
                width2 = parseInt(options.width) - 2*options.cellpadding - 2*options.border - 2;
            }
        } else {
            width = options.width;
            width2 = options.width;
        }

        if(options.height.indexOf('%') == -1) {
            if(options.height == 'auto') {
                height = options.height;
                height2 = options.height;
            } else {
                height = parseInt(options.height);
                height2 = parseInt(options.height) - 2*options.cellpadding - 2*options.border - 2;
            }
        } else {
            height = options.height;
            height2 = options.height;
        }



    table(
        cellspacing= options.cellspacing
        cellpadding= options.cellpadding
        align= 'center'
        valign= 'middle'
        width= width
        height= height
        bgcolor= options.bgcolor
        bordercolor= options.bordercolor
        border= options.border
    )
        tr
            td
                img(
                    src= options.src
                    alt= options.alt
                    width= width2
                    height= height2
                    border= 0
                    style= {
                        'display': 'block'
                })


mixin separator(options)
    -
        var defaults = {
            'width': '100%',
            'height': '1px',
            'top': 0,
            'bottom': 0,
            'bgcolor': transparent,
            'background': none,
        };
        options = options ? options : {}
        var options = setOptions(defaults, options)
    -
        if(options.top != 0) {

    +table({
        'height': options.top + 'px',
    })
        +td
    -
        }

    +table({
        'width': options.width,
        'height': options.height,
        'bgcolor': options.bgcolor,
        'background': options.background,
    })
        +td
    -
        if(options.bottom != 0) {

    +table({
        'height': options.bottom + 'px',
    })
        +td
    -
        }


mixin text(options)
    -
        var defaults = {
            'font-family': fontFamily,
            'font-size': fontSizeM,
            'color': colorFont,
            'line-height': lineHeight,
            'font-weight': 'normal',
            'text-transform': 'none',
            'text-align': 'left',
        };
        options = options ? options : {}
        var options = setOptions(defaults, options);
        var styles = {
            'font-family': options['font-family'],
            'font-size': options['font-size'],
            'color': options['color'],
            'line-height': options['line-height'],
            'font-weight': options['font-weight'],
            'text-transform': options['text-transform'],
        };
    +table
        +td({
            'align': options['text-align']
        })
            span(style=styles)
                if block
                    block


mixin ps(language)
    +separator({
        'bgcolor': colorSeparator,
        'top': '25px',
        'bottom': '25px',
    })
    +text({
        'font-size': fontSizeXS
    }) !{common.labels.ps.text[language]}
    +separator({
        'height': '10px',
    })
    +text({
        'font-size': fontSizeXS
    }) !{common.labels.ps.bye[language]}
    +separator({
        'bottom': '25px',
    })





mixin tableData(options)
    table(
        cellspacing='2'
        cellpadding='10'
        width='100%'
        align='center'
        bgcolor=''
        border='0'
        bordercolor='#999'
        background=''
    )
        - if(options.data.head) {
        - var styleHead = options.style.head;
        thead
            tr
                //- var params = options.style.head.push({'align': 'center'}).push({'height': '35px'}).push({'tag': 'th'});
                - for(var th=0; th<options.data.head.length; th++) {
                th(
                    bgcolor= '#eaebec'
                    height= '35'
                    bordercolor= 'transparent'
                    align= 'center'
                    valign= 'middle'
                )
                    span(style=styleHead) !{options.data.head[th][options.language]}
                //-+td(styleHead)= options.data.head[th][options.language]
                - }
                //-+td(styleHead)= options.data.head[0][options.language]
        - }
        - if(options.data.body) {
        - var styleBody = options.style.body;
            tbody
                - for(var tr=0; tr<options.data.body.length; tr++) {
                tr
                    - for(var td=0; td<options.data.body[tr].length; td++) {
                    - if(td == 0) {
                    - var align = 'left';
                    - } else {
                    - var align = 'center';
                    - }

                    - if(options.type == 'twice') {
                    - if(td == 1) {
                    - styleBody['color'] = strongColor;
                    - styleBody['font-weight'] = 'bold';
                    - var align = 'right';
                    -} else {
                    - styleBody['color'] = colorFont;
                    - styleBody['font-weight'] = 'normal';
                    - var align = 'left';
                    -}
                    -}

                    td(
                        bgcolor= '#f8f8f8'
                        height= '35'
                        bordercolor= 'transparent'
                        align= align
                        valign= 'middle'
                    )
                        span(style=styleBody) !{options.data.body[tr][td][options.language]}
                    - }
                - }
        - }






